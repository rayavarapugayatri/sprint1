MySQL :
*******
CREATE DATABASE anudipdb1;
USE anudipdb1;
CREATE TABLE Employees (
 empId INT PRIMARY KEY,
 empFirstName VARCHAR(50),
 empLastName VARCHAR(50),
 empGender VARCHAR(10),
 empEmail VARCHAR(100),
 mobileNumber VARCHAR(15)
);
INSERT INTO Employees (empId, empFirstName, empLastName, empGender, empEmail,
mobileNumber)
VALUES
 (1, 'John', 'Doe', 'Male', 'john.doe@example.com', '1234567890'),
 (2, 'Alia', 'Bhatt', 'Female', 'alia.bhatt@example.com', '1234567891'),
 (3, 'Varun', 'Dhawan', 'Male', 'varun.dhawan@example.com', '1234567892');

----------------------------------------------------------------------------------------
pom.xml :
*********
<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven4.0.0.xsd">
 <modelVersion>4.0.0</modelVersion>
 <groupId>com.project.maven</groupId>
 <artifactId>HibernateProject</artifactId>
 <version>0.0.1-SNAPSHOT</version>
<dependencies>
 <!-- Hibernate ORM -->
 <dependency>
 <groupId>org.hibernate</groupId>
 <artifactId>hibernate-core</artifactId>
 <version>5.5.6.Final</version>
 </dependency>
 <!-- MySQL Connector -->
 <dependency>
 <groupId>mysql</groupId>
 <artifactId>mysql-connector-java</artifactId>
 <version>8.0.27</version>
 </dependency>
 <!-- Hibernate JPA -->
 <dependency>
 <groupId>org.hibernate.javax.persistence</groupId>
 <artifactId>hibernate-jpa-2.1-api</artifactId>
 <version>1.0.2.Final</version>
 </dependency>
</dependencies>
</project>
 
 ------------------------------------------------------------------------------------
 
 Employee.java :
***************
package com.hibernate.project;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
@Entity
@Table(name = "employees")
public class Employee {
@Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 @Column(name = "empId")
private int empId;
private String empFirstName;
private String empLastName;
private String empGender;
private String empEmail;
private long mobileNumber;
public Employee(int empId, String empFirstName, String empLastName, String empGender,
String empEmail,
long mobileNumber) {
this.empId = empId;
this.empFirstName = empFirstName;
this.empLastName = empLastName;
this.empGender = empGender;
this.empEmail = empEmail;
this.mobileNumber = mobileNumber;
}
public Employee() {
}
public int getEmpId() {
return empId;
}
public void setEmpId(int empId) {
this.empId = empId;
}
public String getEmpFirstName() {
return empFirstName;
}
public void setEmpFirstName(String empFirstName) {
this.empFirstName = empFirstName;
}
public String getEmpLastName() {
return empLastName;
}
public void setEmpLastName(String empLastName) {
this.empLastName = empLastName;
}
public String getEmpGender() {
return empGender;
}
public void setEmpGender(String empGender) {
this.empGender = empGender;
}
public String getEmpEmail() {
return empEmail;
}
public void setEmpEmail(String empEmail) {
this.empEmail = empEmail;
}
public long getMobileNumber() {
return mobileNumber;
}
public void setMobileNumber(long mobileNumber) {
this.mobileNumber = mobileNumber;
}
@Override
public String toString() {
return "Employee [empId=" + empId + ", empFirstName=" + empFirstName + ",
empLastName=" + empLastName
+ ", empGender=" + empGender + ", empEmail=" + empEmail + ",
mobileNumber=" + mobileNumber + "]";
}
}

-------------------------------------------------------------------------------------------
persistence.xml :
*****************
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
 version="2.1">
 <persistence-unit name="employee-jpa" transaction-type="RESOURCE_LOCAL">
 <class>com.hibernate.project.Employee</class>

 <properties>
 <!-- Database Connection Properties -->
 <property name="javax.persistence.jdbc.url"
value="jdbc:mysql://localhost:3306/anudipdb1"/>
 <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
 <property name="javax.persistence.jdbc.user" value="admin"/>
 <property name="javax.persistence.jdbc.password" value="root"/>
 <!-- Hibernate Properties -->
 <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
 <property name="hibernate.show_sql" value="true"/>
 <property name="hibernate.format_sql" value="true"/>
 <property name="hibernate.hbm2ddl.auto" value="update"/>
 <!-- Connection Pooling with C3P0 -->
 <property name="hibernate.c3p0.min_size" value="5"/>
 <property name="hibernate.c3p0.max_size" value="20"/>
 <property name="hibernate.c3p0.timeout" value="300"/>
 <property name="hibernate.c3p0.max_statements" value="50"/>
 <property name="hibernate.c3p0.idle_test_period" value="3000"/>
 </properties>
 </persistence-unit>
</persistence>

--------------------------------------------------------------------------------------------
EmployeeDAO.java :
******************
package com.hibernate.project;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.util.List;
public class EmployeeDAO {
 private final EntityManagerFactory emf;
 public EmployeeDAO() {
 this.emf = Persistence.createEntityManagerFactory("employee-jpa");
 }
 public void saveEmployee(Employee employee) {
 EntityManager em = emf.createEntityManager();
 EntityTransaction transaction = em.getTransaction();
 try {
 transaction.begin();
 if (employee.getEmpId() == 0) {
 // If empId is 0, it's a new employee, persist it
 em.persist(employee);
 } else {
 // If empId is not 0, it's an existing employee, merge it
 em.merge(employee);
 }
 transaction.commit();
 } catch (Exception e) {
 if (transaction != null && transaction.isActive()) {
 transaction.rollback();
 }
 e.printStackTrace();
 } finally {
 em.close();
 }
 }

 public Employee getEmployeeById(int empId) {
 EntityManager em = emf.createEntityManager();
 Employee employee = null;
 try {
 employee = em.find(Employee.class, empId);
 } finally {
 em.close();
 }
 return employee;
 }
 public List<Employee> getAllEmployees() {
 EntityManager em = emf.createEntityManager();
 Query query = em.createQuery("FROM Employee");
 return query.getResultList();
 }
 public void updateEmployee(Employee employee) {
 EntityManager em = emf.createEntityManager();
 EntityTransaction transaction = em.getTransaction();
 try {
 transaction.begin();
 em.merge(employee); // Use merge instead of persist for updates
 transaction.commit();
 } catch (Exception e) {
 if (transaction != null && transaction.isActive()) {
 transaction.rollback();
 }
 e.printStackTrace();
 } finally {
 em.close();
 }
 }
 public void deleteEmployee(int empId) {
 EntityManager em = emf.createEntityManager();
 EntityTransaction tx = em.getTransaction();
 try {
 tx.begin();
 Employee employee = em.find(Employee.class, empId);
 if (employee != null) {
 em.remove(employee);
 }
 tx.commit();
 } catch (Exception e) {
 if (tx.isActive()) {
 tx.rollback();
 }
 e.printStackTrace();
 } finally {
 em.close();
 }
 }
 public void closeEntityManagerFactory() {
 if (emf != null && emf.isOpen()) {
 emf.close();
 }
 }
}

--------------------------------------------------------------------------------
EmployeeApp.java :
******************
package com.hibernate.project;
public class EmployeeApp {
 public static void main(String[] args) {
 EmployeeDAO employeeDAO = new EmployeeDAO();
 // Create and save an employee
 Employee newEmployee1 = new Employee(1, "John", "Doe", "Male", "john.doe@example.com",
1234567890);
 Employee newEmployee2 = new Employee(2, "Alia", "Bhatt", "Female",
"alia.bhatt@example.com", 1234567891);
 Employee newEmployee3 = new Employee(3, "Varun", "Dhawan", "Male",
"varun.dhawan@example.com", 1234567892);
 employeeDAO.saveEmployee(newEmployee1);
 employeeDAO.saveEmployee(newEmployee2);
 employeeDAO.saveEmployee(newEmployee3);
 // Fetch and display all employees
 System.out.println("All Employees: ");
 employeeDAO.getAllEmployees().forEach(System.out::println);
 // Update an employee
 Employee employeeToUpdate = employeeDAO.getEmployeeById(3);
 if (employeeToUpdate != null) {
 employeeToUpdate.setEmpFirstName("Rohan");
 employeeDAO.updateEmployee(employeeToUpdate);
 }
 // Fetch and display all employees after update
 System.out.println("All Employees after update: ");
 employeeDAO.getAllEmployees().forEach(System.out::println);
 // Delete an employee
 employeeDAO.deleteEmployee(1);
 // Fetch and display all employees after delete
 System.out.println("All Employees after delete: ");
 employeeDAO.getAllEmployees().forEach(System.out::println);
 // Close EntityManagerFactory
 employeeDAO.closeEntityManagerFactory();
 }
}
OUTPUT :
Dec 01, 2023 8:50:22 AM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: employee-jpa]
Dec 01, 2023 8:50:22 AM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 5.5.6.Final
Dec 01, 2023 8:50:23 AM org.hibernate.annotations.common.reflection.java.JavaReflectionManager
<clinit>
INFO: HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.ConnectionProviderInitiator instantiateC3p0Provider
WARN: HHH000022: c3p0 properties were encountered, but the c3p0 provider class was not found
on the classpath; these properties are going to be ignored.
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL
[jdbc:mysql://localhost:3306/anudipdb1]
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=admin}
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
Dec 01, 2023 8:50:23 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConn
ections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
Dec 01, 2023 8:50:23 AM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
Dec 01, 2023 8:50:24 AM
org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl
getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess
[org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectio
nAccess@2ab5afc7] for (non-JTA) DDL execution was not in auto-commit mode; the Connection
'local transaction' will be committed and the Connection will be set into auto-commit mode.
Dec 01, 2023 8:50:24 AM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator
initiateService
INFO: HHH000490: Using JtaPlatform implementation:
[org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 insert
 into
 employees
 (empEmail, empFirstName, empGender, empLastName, mobileNumber)
 values
 (?, ?, ?, ?, ?)
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 insert
 into
 employees
 (empEmail, empFirstName, empGender, empLastName, mobileNumber)
 values
 (?, ?, ?, ?, ?)
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 insert
 into
 employees
 (empEmail, empFirstName, empGender, empLastName, mobileNumber)
 values
 (?, ?, ?, ?, ?)
All Employees:
Hibernate:
 select
 employee0_.empId as empid1_0_,
 employee0_.empEmail as empemail2_0_,
 employee0_.empFirstName as empfirst3_0_,
 employee0_.empGender as empgende4_0_,
 employee0_.empLastName as emplastn5_0_,
 employee0_.mobileNumber as mobilenu6_0_
 from
 employees employee0_
Employee [empId=1, empFirstName=John, empLastName=Doe, empGender=Male,
empEmail=john.doe@example.com, mobileNumber=1234567890]
Employee [empId=2, empFirstName=Alia, empLastName=Bhatt, empGender=Female,
empEmail=alia.bhatt@example.com, mobileNumber=1234567891]
Employee [empId=3, empFirstName=Varun, empLastName=Dhawan, empGender=Male,
empEmail=varun.dhawan@example.com, mobileNumber=1234567892]
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 update
 employees
 set
 empEmail=?,
 empFirstName=?,
 empGender=?,
 empLastName=?,
 mobileNumber=?
 where
 empId=?
All Employees after update:
Hibernate:
 select
 employee0_.empId as empid1_0_,
 employee0_.empEmail as empemail2_0_,
 employee0_.empFirstName as empfirst3_0_,
 employee0_.empGender as empgende4_0_,
 employee0_.empLastName as emplastn5_0_,
 employee0_.mobileNumber as mobilenu6_0_
 from
 employees employee0_
Employee [empId=1, empFirstName=John, empLastName=Doe, empGender=Male,
empEmail=john.doe@example.com, mobileNumber=1234567890]
Employee [empId=2, empFirstName=Alia, empLastName=Bhatt, empGender=Female,
empEmail=alia.bhatt@example.com, mobileNumber=1234567891]
Employee [empId=3, empFirstName=Rohan, empLastName=Dhawan, empGender=Male,
empEmail=varun.dhawan@example.com, mobileNumber=1234567892]
Hibernate:
 select
 employee0_.empId as empid1_0_0_,
 employee0_.empEmail as empemail2_0_0_,
 employee0_.empFirstName as empfirst3_0_0_,
 employee0_.empGender as empgende4_0_0_,
 employee0_.empLastName as emplastn5_0_0_,
 employee0_.mobileNumber as mobilenu6_0_0_
 from
 employees employee0_
 where
 employee0_.empId=?
Hibernate:
 delete
 from
 employees
 where
 empId=?
All Employees after delete:
Hibernate:
 select
 employee0_.empId as empid1_0_,
 employee0_.empEmail as empemail2_0_,
 employee0_.empFirstName as empfirst3_0_,
 employee0_.empGender as empgende4_0_,
 employee0_.empLastName as emplastn5_0_,
 employee0_.mobileNumber as mobilenu6_0_
 from
 employees employee0_
Employee [empId=2, empFirstName=Alia, empLastName=Bhatt, empGender=Female,
empEmail=alia.bhatt@example.com, mobileNumber=1234567891]
Employee [empId=3, empFirstName=Rohan, empLastName=Dhawan, empGender=Male,
empEmail=varun.dhawan@example.com, mobileNumber=1234567892]
Dec 01, 2023 8:50:24 AM
org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState
stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:mysql://localhost:3306/anudipdb1]
